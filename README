libprereadshim

libprereadshim is a layer that can be inserted between the OS's system calls
and another program. It essentially attempts to solve the opposite problem as
libeatmydata: programs which make isolated, small reads.

An example of this problem is Firefox. Whenever a website is accessed, it will
check for a cookie or other such data, often spinning the HDD back up just for
a miniscule data access. (The other problem of Firefox fsync()ing A LOT should
be handled by libeatmydata.)

libprereadshim uses five methods to mitigate the read problem:

1. Programs usually use mostly the same files on each run. The first 8 MB (by
default) of files read by the program more than 15 (by default) seconds after
the program started are automatically read in when it starts.

2. Traversing one part of a directory usually results in traversing more of
it. Whenever a file is opened, its containing directory is iterated if it is
the first time that a file in that directory was opened.

3. Opening a file for reading usually indicates that the whole file will be
read at some point. When a file is opened for reading, data from the file (up
to 64 MB by default) is read before returning the file handle, the first time a
given file is opened.

4. Reading one file in a directory is usually followed by reading others (eg,
cookies in Firefox). When a file is openned for reading whose name matches a
configured pattern(s), other files in that directory will be read in the
background.

5. libprereadshim may be configured to deny the existence of files matching
certain patterns.

Dependencies:
  Just make and a C compiler. GNU Autotools as well if working directly from
  the git distribution.
  Your kernel must support using O_ASYNC on pipes. Linux 2.6 (and later) is an
  example of such a kernel.

Building:
  If configure does not exist in the project directory, first run
    autoreconf

  In either case, then run
    ./configure
    make

Installing:
  As root, run
    make install
  (on Ubuntu and such just run "sudo make install" as yourself)

Uninstalling:
  make uninstall
or
  sudo make uninstall


CONFIGURATION

The environment variable PREREADSHIM_DENY may be set to a colon-separated list
of glob patterns. If any file to be opened for reading matches any of the
patterns (see fnmatch(3)), libprereadshim will deny the file's existence. Files
which are opened for writing at any time are whitelisted and thereafter not
affected by this option. For example, specifying
  */Cache/?/*:*/OfflineCache/?/*
would prevent Firefox from reading old cache files.

The environment variable PREREADSHIM_READAHEAD indicates how many megabytes
should be read from each file opened for reading. If unset, it defaults to
64. Setting it to zero effectively disables readahead.

The amount of time, in seconds, between the signaling of an event and its
processing can be altered with the environment variable PREREADSHIM_DELAY. The
default value is 5 seconds.

If the environment variable PREREADSHIM_PROFILE exists, a list of filenames is
read from the file specified in that variable, one file per line.
PREREADSHIM_DELAY seconds after the program starts, the contents of these files
are read in, up to PREREADSHIM_PREREAD megabytes. PREREADSHIM_PREREAD defaults
to 16 megabytes.

The environment variable PREREADSHIM_SIBLINGS can be set to indicate the number
of megabytes to read from sibling files an a directory. By default it is 16.

ISSUES

The shim layer is not currently thread-safe. Multithreaded programs may cause
strange problems.

Since libprereadshim currently uses one daemon per host process, it is not
really viable to use /etc/ld.conf.preload to globally apply the shim to the
entire system. Eventually, daemons will be sharable, allowing this to be done.

If a program accesses a file in a directory and seconds later attempts to get
an exclusive lock in a file within, it may collide with the daemon trying to
preread that file.

Concurrent modification of files may give unexpected results in corner
cases. For example, if the host process opens a file in read-append mode,
libprereadshim will restore the file pointer to its original location after
prereading, which might no longer be the end of the file (or might not exist
anymore).
